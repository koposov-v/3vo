definitions:
  dto.CreateUserRequest:
    properties:
      password:
        example: secret123
        minLength: 6
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: secret123
        minLength: 6
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  dto.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        example: "2025-06-26T11:46:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      username:
        example: john_doe
        type: string
    type: object
  v1.Response:
    properties:
      error:
        example: failed
        type: string
      message:
        example: User created
        type: string
    type: object
  v1.UserResponse:
    properties:
      error:
        example: failed
        type: string
      message:
        example: User created
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Login a user
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with username and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Create a new user
      tags:
      - users
  /validate:
    get:
      consumes:
      - application/json
      description: Validate a provided JWT token
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/v1.Response'
      summary: Validate JWT token
      tags:
      - users
swagger: "2.0"
